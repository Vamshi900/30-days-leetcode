

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.


Solution : 

/**
 * @param {number[]} nums
 * @return {number}
 */
var maxSubArray = function(nums) {
   
    let globalMax = nums[0];
	let start = 0,
		end = nums.length - 1,
		len = nums.length;

	for (let i = 0; i < len; i++) {
		maxSum = 0;

		for (let j = i; j < len; j++) {
			maxSum += nums[j];

			if (globalMax < maxSum) {
				start = i;
				globalMax = maxSum;
				end = j;
			}
		}
	}


    return (globalMax);

    
};
