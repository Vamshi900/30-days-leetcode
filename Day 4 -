

Problem : 

Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Example:

Input: [0,1,0,3,12]
Output: [1,3,12,0,0]
Note:

You must do this in-place without making a copy of the array.
Minimize the total number of operations.


Solution 1  : // intial solution 

/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
var moveZeroes = function(nums) {
   
    let temp;
    let len = nums.length;
        for (i=len -1;i>=0;i--){
         if(nums[i] === 0) {
            temp = nums.splice(i, 1);
            nums.push(temp[0]);
        }

    }      
  
};


Solution 2 :  a better approach 

/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
var moveZeroes = function(nums) {
   // using non zero approach
    let nonZeroIndex =0;
    let len = nums.length;
        for (i=0;i<len;i++){
         if(nums[i] !==0) {
         // post fix update of nonzeroindex and 
         // copy of non zero element to previus index
         // example [1,2,0,4]
     
                   nums[nonZeroIndex++] = nums[i];
        }
        //update count of non zero elements at end of array to zeroes
           for (i=nonZeroIndex;i<len;i++){
               nums[i] = 0;
        }

    }      
  
};
