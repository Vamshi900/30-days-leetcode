//Run time : 60 ms better than 72%
//Memory : 34 Mb better than most highest had roughly 32 Mb usage

// Problem :


Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4


var singleNumber = function(nums) {
    let cloneObject = {};
    let returnNumber = null;
    for(i = 0; i< nums.length ; i++){
            if(cloneObject.hasOwnProperty(nums[i])){
                cloneObject[nums[i]].count = 2;
            }else{
                cloneObject[nums[i]] = {count : 1 , value: nums[i]};
            }
        
    }
    
    returnNumber = Object.values(cloneObject).filter(obj => {
  return obj.count === 1
});
        console.log(returnNumber);

    return returnNumber[0].value;
    
};
